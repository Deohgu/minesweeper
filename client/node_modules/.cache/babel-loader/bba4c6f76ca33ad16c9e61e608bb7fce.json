{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// TODO: Keys shouldn't be this complex.\n// TODO:   There should be a CellType, a BombCell type that extends the CellType, a EmptyCell(?) that also extends\nconst initialState = {\n  gridColumnsAmount: 10,\n  gridLength: 100,\n  bombsAmount: 20,\n  get flagsAvailable() {\n    return this.bombsAmount;\n  },\n  cellArray: [],\n  gameStatus: \"waiting\"\n};\nexport const settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    increment: state => {\n      state.bombsAmount += 1;\n    },\n    decrement: state => {\n      state.bombsAmount -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.bombsAmount += action.payload;\n    },\n    incFlagsAvailable: state => {\n      state.flagsAvailable += 1;\n    },\n    decFlagsAvailable: state => {\n      state.flagsAvailable -= 1;\n    },\n    resetFlagsAvailable: state => {\n      state.flagsAvailable = state.bombsAmount;\n    },\n    setCellArray: (state, action) => {\n      state.cellArray = action.payload;\n    },\n    setGameStatus: (state, action) => {\n      state.gameStatus = action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  incFlagsAvailable,\n  decFlagsAvailable,\n  resetFlagsAvailable,\n  setCellArray,\n  setGameStatus\n} = settingsSlice.actions;\nexport const selectSettings = state => state.settings;\nexport default settingsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","gridColumnsAmount","gridLength","bombsAmount","flagsAvailable","cellArray","gameStatus","settingsSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","incFlagsAvailable","decFlagsAvailable","resetFlagsAvailable","setCellArray","setGameStatus","actions","selectSettings","settings","reducer"],"sources":["/Users/diogosantos/dev/minesweeper/client/src/store/settingsSlice.ts"],"sourcesContent":["import { RootState } from \"./store\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// TODO: Keys shouldn't be this complex.\n// TODO:   There should be a CellType, a BombCell type that extends the CellType, a EmptyCell(?) that also extends\nexport interface CellType {\n  value?: \"bomb\" | number | \"bombPressed\";\n  checked: boolean;\n  advancedChecked: boolean;\n  flagged: boolean | \"wrong\";\n}\n\nexport type initialStateTypes = {\n  gridColumnsAmount: number;\n  gridLength: number;\n  bombsAmount: number;\n  flagsAvailable: number;\n  cellArray: CellType[];\n  gameStatus: \"won\" | \"lost\" | \"waiting\" | \"running\";\n};\n\nconst initialState: initialStateTypes = {\n  gridColumnsAmount: 10,\n  gridLength: 100,\n  bombsAmount: 20,\n  get flagsAvailable() {\n    return this.bombsAmount;\n  },\n  cellArray: [],\n  gameStatus: \"waiting\",\n};\n\nexport const settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.bombsAmount += 1;\n    },\n    decrement: (state) => {\n      state.bombsAmount -= 1;\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.bombsAmount += action.payload;\n    },\n    incFlagsAvailable: (state) => {\n      state.flagsAvailable += 1;\n    },\n    decFlagsAvailable: (state) => {\n      state.flagsAvailable -= 1;\n    },\n    resetFlagsAvailable: (state) => {\n      state.flagsAvailable = state.bombsAmount;\n    },\n    setCellArray: (\n      state,\n      action: PayloadAction<initialStateTypes[\"cellArray\"]>\n    ) => {\n      state.cellArray = action.payload;\n    },\n    setGameStatus: (\n      state,\n      action: PayloadAction<initialStateTypes[\"gameStatus\"]>\n    ) => {\n      state.gameStatus = action.payload;\n    },\n  },\n});\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  incFlagsAvailable,\n  decFlagsAvailable,\n  resetFlagsAvailable,\n  setCellArray,\n  setGameStatus,\n} = settingsSlice.actions;\n\nexport const selectSettings = (state: RootState) => state.settings;\n\nexport default settingsSlice.reducer;\n"],"mappings":"AACA,SAASA,WAAW,QAAuB,kBAAkB;;AAE7D;AACA;AAiBA,MAAMC,YAA+B,GAAG;EACtCC,iBAAiB,EAAE,EAAE;EACrBC,UAAU,EAAE,GAAG;EACfC,WAAW,EAAE,EAAE;EACf,IAAIC,cAAcA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACD,WAAW;EACzB,CAAC;EACDE,SAAS,EAAE,EAAE;EACbC,UAAU,EAAE;AACd,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGR,WAAW,CAAC;EACvCS,IAAI,EAAE,UAAU;EAChBR,YAAY;EACZS,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACR,WAAW,IAAI,CAAC;IACxB,CAAC;IACDS,SAAS,EAAGD,KAAK,IAAK;MACpBA,KAAK,CAACR,WAAW,IAAI,CAAC;IACxB,CAAC;IACDU,iBAAiB,EAAEA,CAACF,KAAK,EAAEG,MAA6B,KAAK;MAC3DH,KAAK,CAACR,WAAW,IAAIW,MAAM,CAACC,OAAO;IACrC,CAAC;IACDC,iBAAiB,EAAGL,KAAK,IAAK;MAC5BA,KAAK,CAACP,cAAc,IAAI,CAAC;IAC3B,CAAC;IACDa,iBAAiB,EAAGN,KAAK,IAAK;MAC5BA,KAAK,CAACP,cAAc,IAAI,CAAC;IAC3B,CAAC;IACDc,mBAAmB,EAAGP,KAAK,IAAK;MAC9BA,KAAK,CAACP,cAAc,GAAGO,KAAK,CAACR,WAAW;IAC1C,CAAC;IACDgB,YAAY,EAAEA,CACZR,KAAK,EACLG,MAAqD,KAClD;MACHH,KAAK,CAACN,SAAS,GAAGS,MAAM,CAACC,OAAO;IAClC,CAAC;IACDK,aAAa,EAAEA,CACbT,KAAK,EACLG,MAAsD,KACnD;MACHH,KAAK,CAACL,UAAU,GAAGQ,MAAM,CAACC,OAAO;IACnC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXL,SAAS;EACTE,SAAS;EACTC,iBAAiB;EACjBG,iBAAiB;EACjBC,iBAAiB;EACjBC,mBAAmB;EACnBC,YAAY;EACZC;AACF,CAAC,GAAGb,aAAa,CAACc,OAAO;AAEzB,OAAO,MAAMC,cAAc,GAAIX,KAAgB,IAAKA,KAAK,CAACY,QAAQ;AAElE,eAAehB,aAAa,CAACiB,OAAO"},"metadata":{},"sourceType":"module"}