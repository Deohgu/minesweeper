{"ast":null,"code":"var _jsxFileName = \"/Users/diogosantos/dev/minesweeper/client/src/components/Game/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Draggable from \"react-draggable\";\nimport { resetFlagsAvailable, setCellArray, setGameStatus, selectSettings } from \"../../store/settingsSlice\";\nimport TitleBar from \"../TitleBar/TitleBar\";\nimport WindowButtons from \"../WindowButtons/WindowButtons\";\nimport { Scoreboard } from \"../Scoreboard/Scoreboard\";\nimport Board from \"../Board/Board\";\nimport { Window, GameBox } from \"./Game.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Game = () => {\n  _s();\n  const {\n    gridLength: gridSize,\n    bombsAmount,\n    cellArray,\n    gameStatus\n  } = useSelector(selectSettings);\n  const dispatch = useDispatch();\n\n  ///////////////////////// Creator of grid & Bomb Populator\n  // If status of the game changes to \"waiting\" -> generate a new Cell array.\n  // Runs at the start and at each reset button press.\n  useEffect(() => {\n    if (gameStatus === \"waiting\") {\n      dispatch(resetFlagsAvailable());\n      const newCellArray = [];\n      for (let i = 0; i < gridSize - bombsAmount; i++) {\n        newCellArray.push({\n          checked: false,\n          advancedChecked: false,\n          flagged: false\n        });\n      }\n      for (let j = 0; j < bombsAmount; j++) {\n        newCellArray.push({\n          value: \"bomb\",\n          checked: false,\n          advancedChecked: false,\n          flagged: false\n        });\n      }\n      dispatch(setCellArray(newCellArray.sort((a, b) => Math.random() - 0.5)));\n    }\n  }, [dispatch, gameStatus, bombsAmount, gridSize]);\n\n  //  Updates game's status\n  useEffect(() => {\n    // Algorithm To be improved\n    let advCheckedAmount = 0;\n    let bombPressed = false;\n    cellArray.forEach(curr => {\n      if (curr.advancedChecked) {\n        advCheckedAmount++;\n      }\n      if (curr.value === \"bombPressed\") {\n        bombPressed = true;\n      }\n    });\n    if (bombPressed) {\n      dispatch(setGameStatus(\"lost\"));\n    } else if (advCheckedAmount === gridSize - bombsAmount) {\n      dispatch(setGameStatus(\"won\"));\n    }\n  }, [bombsAmount, cellArray, dispatch, gridSize]);\n\n  // makes everything visible if won\n  useEffect(() => {\n    if (gameStatus === \"won\") {\n      const gridCopy = JSON.parse(JSON.stringify(cellArray));\n      gridCopy.forEach(cell => {\n        cell.advancedChecked = true; // makes everything visible\n      });\n\n      dispatch(setCellArray(gridCopy));\n    }\n  }, [dispatch, gameStatus]); // eslint-disable-line\n\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    handle: \".handle\",\n    children: /*#__PURE__*/_jsxDEV(Window, {\n      children: [/*#__PURE__*/_jsxDEV(TitleBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WindowButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameBox, {\n        children: [/*#__PURE__*/_jsxDEV(Scoreboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"jMA8BufhuwWPd8xJFaGYDdxBoBs=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","Draggable","resetFlagsAvailable","setCellArray","setGameStatus","selectSettings","TitleBar","WindowButtons","Scoreboard","Board","Window","GameBox","jsxDEV","_jsxDEV","Game","_s","gridLength","gridSize","bombsAmount","cellArray","gameStatus","dispatch","newCellArray","i","push","checked","advancedChecked","flagged","j","value","sort","a","b","Math","random","advCheckedAmount","bombPressed","forEach","curr","gridCopy","JSON","parse","stringify","cell","handle","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diogosantos/dev/minesweeper/client/src/components/Game/Game.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Draggable from \"react-draggable\";\n\nimport {\n  resetFlagsAvailable,\n  setCellArray,\n  setGameStatus,\n  CellType,\n  initialStateTypes,\n  selectSettings,\n} from \"../../store/settingsSlice\";\n\nimport TitleBar from \"../TitleBar/TitleBar\";\nimport WindowButtons from \"../WindowButtons/WindowButtons\";\nimport { Scoreboard } from \"../Scoreboard/Scoreboard\";\nimport Board from \"../Board/Board\";\n\nimport { Window, GameBox } from \"./Game.styled\";\n\nexport const Game = () => {\n  const {\n    gridLength: gridSize,\n    bombsAmount,\n    cellArray,\n    gameStatus,\n  } = useSelector(selectSettings);\n  const dispatch = useDispatch();\n\n  ///////////////////////// Creator of grid & Bomb Populator\n  // If status of the game changes to \"waiting\" -> generate a new Cell array.\n  // Runs at the start and at each reset button press.\n  useEffect(() => {\n    if (gameStatus === \"waiting\") {\n      dispatch(resetFlagsAvailable());\n      const newCellArray: initialStateTypes[\"cellArray\"] = [];\n      for (let i = 0; i < gridSize - bombsAmount; i++) {\n        newCellArray.push({\n          checked: false,\n          advancedChecked: false,\n          flagged: false,\n        });\n      }\n      for (let j = 0; j < bombsAmount; j++) {\n        newCellArray.push({\n          value: \"bomb\",\n          checked: false,\n          advancedChecked: false,\n          flagged: false,\n        });\n      }\n      dispatch(setCellArray(newCellArray.sort((a, b) => Math.random() - 0.5)));\n    }\n  }, [dispatch, gameStatus, bombsAmount, gridSize]);\n\n  //  Updates game's status\n  useEffect(() => {\n    // Algorithm To be improved\n    let advCheckedAmount = 0;\n    let bombPressed = false;\n    cellArray.forEach((curr) => {\n      if (curr.advancedChecked) {\n        advCheckedAmount++;\n      }\n      if (curr.value === \"bombPressed\") {\n        bombPressed = true;\n      }\n    });\n\n    if (bombPressed) {\n      dispatch(setGameStatus(\"lost\"));\n    } else if (advCheckedAmount === gridSize - bombsAmount) {\n      dispatch(setGameStatus(\"won\"));\n    }\n  }, [bombsAmount, cellArray, dispatch, gridSize]);\n\n  // makes everything visible if won\n  useEffect(() => {\n    if (gameStatus === \"won\") {\n      const gridCopy = JSON.parse(JSON.stringify(cellArray));\n      gridCopy.forEach((cell: CellType) => {\n        cell.advancedChecked = true; // makes everything visible\n      });\n\n      dispatch(setCellArray(gridCopy));\n    }\n  }, [dispatch, gameStatus]); // eslint-disable-line\n\n  return (\n    <Draggable handle=\".handle\">\n      <Window>\n        <TitleBar />\n        <WindowButtons />\n        <GameBox>\n          <Scoreboard />\n          <Board />\n        </GameBox>\n      </Window>\n    </Draggable>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}