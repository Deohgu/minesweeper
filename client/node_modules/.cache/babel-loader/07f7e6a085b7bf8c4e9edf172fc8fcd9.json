{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";// TODO: Keys shouldn't be this complex.\n// TODO:   There should be a CellType, a BombCell type that extends the CellType, a EmptyCell(?) that also extends\nvar initialState={gridColumnsAmount:10,gridLength:100,bombsAmount:20,get flagsAvailable(){return this.bombsAmount;},cellArray:[],gameStatus:\"waiting\"};export var settingsSlice=createSlice({name:\"settings\",initialState:initialState,reducers:{increment:function increment(state){state.bombsAmount+=1;},decrement:function decrement(state){state.bombsAmount-=1;},incrementByAmount:function incrementByAmount(state,action){state.bombsAmount+=action.payload;},incFlagsAvailable:function incFlagsAvailable(state){state.flagsAvailable+=1;},decFlagsAvailable:function decFlagsAvailable(state){state.flagsAvailable-=1;},resetFlagsAvailable:function resetFlagsAvailable(state){state.flagsAvailable=state.bombsAmount;},setCellArray:function setCellArray(state,action){state.cellArray=action.payload;},setGameStatus:function setGameStatus(state,action){state.gameStatus=action.payload;}}});var _settingsSlice$action=settingsSlice.actions,increment=_settingsSlice$action.increment,decrement=_settingsSlice$action.decrement,incrementByAmount=_settingsSlice$action.incrementByAmount,incFlagsAvailable=_settingsSlice$action.incFlagsAvailable,decFlagsAvailable=_settingsSlice$action.decFlagsAvailable,resetFlagsAvailable=_settingsSlice$action.resetFlagsAvailable,setCellArray=_settingsSlice$action.setCellArray,setGameStatus=_settingsSlice$action.setGameStatus;export{increment,decrement,incrementByAmount,incFlagsAvailable,decFlagsAvailable,resetFlagsAvailable,setCellArray,setGameStatus};export var selectSettings=function selectSettings(state){return state.settings;};export default settingsSlice.reducer;","map":{"version":3,"sources":["/Users/diogosantos/dev/minesweeper/src/store/settingsSlice.ts"],"names":["createSlice","initialState","gridColumnsAmount","gridLength","bombsAmount","flagsAvailable","cellArray","gameStatus","settingsSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","incFlagsAvailable","decFlagsAvailable","resetFlagsAvailable","setCellArray","setGameStatus","actions","selectSettings","settings","reducer"],"mappings":"AACA,OAASA,WAAT,KAA2C,kBAA3C,CAEA;AACA;AAiBA,GAAMC,CAAAA,YAA+B,CAAG,CACtCC,iBAAiB,CAAE,EADmB,CAEtCC,UAAU,CAAE,GAF0B,CAGtCC,WAAW,CAAE,EAHyB,CAItC,GAAIC,CAAAA,cAAJ,EAAqB,CACnB,MAAO,MAAKD,WAAZ,CACD,CANqC,CAOtCE,SAAS,CAAE,EAP2B,CAQtCC,UAAU,CAAE,SAR0B,CAAxC,CAWA,MAAO,IAAMC,CAAAA,aAAa,CAAGR,WAAW,CAAC,CACvCS,IAAI,CAAE,UADiC,CAEvCR,YAAY,CAAZA,YAFuC,CAGvCS,QAAQ,CAAE,CACRC,SAAS,CAAE,mBAACC,KAAD,CAAW,CACpBA,KAAK,CAACR,WAAN,EAAqB,CAArB,CACD,CAHO,CAIRS,SAAS,CAAE,mBAACD,KAAD,CAAW,CACpBA,KAAK,CAACR,WAAN,EAAqB,CAArB,CACD,CANO,CAORU,iBAAiB,CAAE,2BAACF,KAAD,CAAQG,MAAR,CAA0C,CAC3DH,KAAK,CAACR,WAAN,EAAqBW,MAAM,CAACC,OAA5B,CACD,CATO,CAURC,iBAAiB,CAAE,2BAACL,KAAD,CAAW,CAC5BA,KAAK,CAACP,cAAN,EAAwB,CAAxB,CACD,CAZO,CAaRa,iBAAiB,CAAE,2BAACN,KAAD,CAAW,CAC5BA,KAAK,CAACP,cAAN,EAAwB,CAAxB,CACD,CAfO,CAgBRc,mBAAmB,CAAE,6BAACP,KAAD,CAAW,CAC9BA,KAAK,CAACP,cAAN,CAAuBO,KAAK,CAACR,WAA7B,CACD,CAlBO,CAmBRgB,YAAY,CAAE,sBACZR,KADY,CAEZG,MAFY,CAGT,CACHH,KAAK,CAACN,SAAN,CAAkBS,MAAM,CAACC,OAAzB,CACD,CAxBO,CAyBRK,aAAa,CAAE,uBACbT,KADa,CAEbG,MAFa,CAGV,CACHH,KAAK,CAACL,UAAN,CAAmBQ,MAAM,CAACC,OAA1B,CACD,CA9BO,CAH6B,CAAD,CAAjC,C,0BA8CHR,aAAa,CAACc,O,CARhBX,S,uBAAAA,S,CACAE,S,uBAAAA,S,CACAC,iB,uBAAAA,iB,CACAG,iB,uBAAAA,iB,CACAC,iB,uBAAAA,iB,CACAC,mB,uBAAAA,mB,CACAC,Y,uBAAAA,Y,CACAC,a,uBAAAA,a,kIAGF,MAAO,IAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACX,KAAD,QAAsBA,CAAAA,KAAK,CAACY,QAA5B,EAAvB,CAEP,cAAehB,CAAAA,aAAa,CAACiB,OAA7B","sourcesContent":["import { RootState } from \"./store\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// TODO: Keys shouldn't be this complex.\n// TODO:   There should be a CellType, a BombCell type that extends the CellType, a EmptyCell(?) that also extends\nexport interface CellType {\n  value?: \"bomb\" | number | \"bombPressed\";\n  checked: boolean;\n  advancedChecked: boolean;\n  flagged: boolean | \"wrong\";\n}\n\nexport type initialStateTypes = {\n  gridColumnsAmount: number;\n  gridLength: number;\n  bombsAmount: number;\n  flagsAvailable: number;\n  cellArray: CellType[];\n  gameStatus: \"won\" | \"lost\" | \"waiting\" | \"running\";\n};\n\nconst initialState: initialStateTypes = {\n  gridColumnsAmount: 10,\n  gridLength: 100,\n  bombsAmount: 20,\n  get flagsAvailable() {\n    return this.bombsAmount;\n  },\n  cellArray: [],\n  gameStatus: \"waiting\",\n};\n\nexport const settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.bombsAmount += 1;\n    },\n    decrement: (state) => {\n      state.bombsAmount -= 1;\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.bombsAmount += action.payload;\n    },\n    incFlagsAvailable: (state) => {\n      state.flagsAvailable += 1;\n    },\n    decFlagsAvailable: (state) => {\n      state.flagsAvailable -= 1;\n    },\n    resetFlagsAvailable: (state) => {\n      state.flagsAvailable = state.bombsAmount;\n    },\n    setCellArray: (\n      state,\n      action: PayloadAction<initialStateTypes[\"cellArray\"]>\n    ) => {\n      state.cellArray = action.payload;\n    },\n    setGameStatus: (\n      state,\n      action: PayloadAction<initialStateTypes[\"gameStatus\"]>\n    ) => {\n      state.gameStatus = action.payload;\n    },\n  },\n});\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  incFlagsAvailable,\n  decFlagsAvailable,\n  resetFlagsAvailable,\n  setCellArray,\n  setGameStatus,\n} = settingsSlice.actions;\n\nexport const selectSettings = (state: RootState) => state.settings;\n\nexport default settingsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}