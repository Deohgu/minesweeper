{"ast":null,"code":"import React,{memo}from\"react\";import{useSelector,useDispatch}from\"react-redux\";import{setCellArray,setGameStatus,incFlagsAvailable,decFlagsAvailable,selectSettings}from\"../../store/settingsSlice\";import{CellStyled}from\"./Cell.styled\";import{toDisplay}from\"../../utils/CellUtils/toDisplay\";import{cellPressed}from\"../../utils/BoardUtils/cellPressed\";var Cell=function Cell(_ref){var index=_ref.index,pressed=_ref.pressed;var _useSelector=useSelector(selectSettings),gridSize=_useSelector.gridLength,gridColumns=_useSelector.gridColumnsAmount,gameStatus=_useSelector.gameStatus,cellArray=_useSelector.cellArray;var dispatch=useDispatch();var flagHandler=function flagHandler(e,index){e.preventDefault();if(gameStatus===\"running\"){var cellArrayCopy=JSON.parse(JSON.stringify(cellArray));if(cellArrayCopy[index].advancedChecked===false){if(cellArrayCopy[index].flagged===false){cellArrayCopy[index].flagged=true;dispatch(decFlagsAvailable());}else{cellArrayCopy[index].flagged=false;dispatch(incFlagsAvailable());}}dispatch(setCellArray(cellArrayCopy));}};var isClickableSquare=function isClickableSquare(){return(gameStatus===\"waiting\"||gameStatus===\"running\")&&cellArray[index].flagged!==true&&cellArray[index].advancedChecked===false;};return/*#__PURE__*/React.createElement(CellStyled,{onClick:function onClick(){// Should the onClick and onContextMenu logic be inside the Cell?\nif(isClickableSquare()){dispatch(setCellArray(cellPressed(index,cellArray,gridColumns,gridSize)));if(gameStatus!==\"running\")dispatch(setGameStatus(\"running\"));}},onContextMenu:function onContextMenu(e){return flagHandler(e,index);},gridColumns:gridColumns,pressed:pressed,draggable:\"false\"},toDisplay(cellArray[index]));};export default memo(Cell);","map":{"version":3,"sources":["/Users/diogosantos/dev/minesweeper/src/components/Cell/Cell.tsx"],"names":["React","memo","useSelector","useDispatch","setCellArray","setGameStatus","incFlagsAvailable","decFlagsAvailable","selectSettings","CellStyled","toDisplay","cellPressed","Cell","index","pressed","gridSize","gridLength","gridColumns","gridColumnsAmount","gameStatus","cellArray","dispatch","flagHandler","e","preventDefault","cellArrayCopy","JSON","parse","stringify","advancedChecked","flagged","isClickableSquare"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAmDC,IAAnD,KAA+D,OAA/D,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OACEC,YADF,CAEEC,aAFF,CAGEC,iBAHF,CAIEC,iBAJF,CAKEC,cALF,KAMO,2BANP,CAQA,OAASC,UAAT,KAA2B,eAA3B,CAEA,OAASC,SAAT,KAA0B,iCAA1B,CACA,OAASC,WAAT,KAA4B,oCAA5B,CAOA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAAmC,IAAhCC,CAAAA,KAAgC,MAAhCA,KAAgC,CAAzBC,OAAyB,MAAzBA,OAAyB,kBAM1CZ,WAAW,CAACM,cAAD,CAN+B,CAEhCO,QAFgC,cAE5CC,UAF4C,CAGzBC,WAHyB,cAG5CC,iBAH4C,CAI5CC,UAJ4C,cAI5CA,UAJ4C,CAK5CC,SAL4C,cAK5CA,SAL4C,CAQ9C,GAAMC,CAAAA,QAAQ,CAAGlB,WAAW,EAA5B,CAEA,GAAMmB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,CAAD,CAAgBV,KAAhB,CAAkC,CACpDU,CAAC,CAACC,cAAF,GACA,GAAIL,UAAU,GAAK,SAAnB,CAA8B,CAC5B,GAAIM,CAAAA,aAAa,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,SAAf,CAAX,CAApB,CACA,GAAIK,aAAa,CAACZ,KAAD,CAAb,CAAqBgB,eAArB,GAAyC,KAA7C,CAAoD,CAClD,GAAIJ,aAAa,CAACZ,KAAD,CAAb,CAAqBiB,OAArB,GAAiC,KAArC,CAA4C,CAC1CL,aAAa,CAACZ,KAAD,CAAb,CAAqBiB,OAArB,CAA+B,IAA/B,CACAT,QAAQ,CAACd,iBAAiB,EAAlB,CAAR,CACD,CAHD,IAGO,CACLkB,aAAa,CAACZ,KAAD,CAAb,CAAqBiB,OAArB,CAA+B,KAA/B,CACAT,QAAQ,CAACf,iBAAiB,EAAlB,CAAR,CACD,CACF,CACDe,QAAQ,CAACjB,YAAY,CAACqB,aAAD,CAAb,CAAR,CACD,CACF,CAfD,CAiBA,GAAMM,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,SACxB,CAACZ,UAAU,GAAK,SAAf,EAA4BA,UAAU,GAAK,SAA5C,GACAC,SAAS,CAACP,KAAD,CAAT,CAAiBiB,OAAjB,GAA6B,IAD7B,EAEAV,SAAS,CAACP,KAAD,CAAT,CAAiBgB,eAAjB,GAAqC,KAHb,EAA1B,CAKA,mBACE,oBAAC,UAAD,EACE,OAAO,CAAE,kBAAM,CACb;AACA,GAAIE,iBAAiB,EAArB,CAAyB,CACvBV,QAAQ,CACNjB,YAAY,CAACO,WAAW,CAACE,KAAD,CAAQO,SAAR,CAAmBH,WAAnB,CAAgCF,QAAhC,CAAZ,CADN,CAAR,CAGA,GAAII,UAAU,GAAK,SAAnB,CAA8BE,QAAQ,CAAChB,aAAa,CAAC,SAAD,CAAd,CAAR,CAC/B,CACF,CATH,CAUE,aAAa,CAAE,uBAACkB,CAAD,QAAmBD,CAAAA,WAAW,CAACC,CAAD,CAAIV,KAAJ,CAA9B,EAVjB,CAWE,WAAW,CAAEI,WAXf,CAYE,OAAO,CAAEH,OAZX,CAaE,SAAS,CAAC,OAbZ,EAeGJ,SAAS,CAACU,SAAS,CAACP,KAAD,CAAV,CAfZ,CADF,CAmBD,CAnDD,CAqDA,cAAeZ,CAAAA,IAAI,CAACW,IAAD,CAAnB","sourcesContent":["import React, { MouseEvent, ComponentPropsWithRef, memo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  setCellArray,\n  setGameStatus,\n  incFlagsAvailable,\n  decFlagsAvailable,\n  selectSettings,\n} from \"../../store/settingsSlice\";\n\nimport { CellStyled } from \"./Cell.styled\";\n\nimport { toDisplay } from \"../../utils/CellUtils/toDisplay\";\nimport { cellPressed } from \"../../utils/BoardUtils/cellPressed\";\n\ntype CellTypes = {\n  index: number;\n  pressed: boolean;\n} & ComponentPropsWithRef<typeof CellStyled>;\n\nconst Cell = ({ index, pressed }: CellTypes) => {\n  const {\n    gridLength: gridSize,\n    gridColumnsAmount: gridColumns,\n    gameStatus,\n    cellArray,\n  } = useSelector(selectSettings);\n\n  const dispatch = useDispatch();\n\n  const flagHandler = (e: MouseEvent, index: number) => {\n    e.preventDefault();\n    if (gameStatus === \"running\") {\n      let cellArrayCopy = JSON.parse(JSON.stringify(cellArray));\n      if (cellArrayCopy[index].advancedChecked === false) {\n        if (cellArrayCopy[index].flagged === false) {\n          cellArrayCopy[index].flagged = true;\n          dispatch(decFlagsAvailable());\n        } else {\n          cellArrayCopy[index].flagged = false;\n          dispatch(incFlagsAvailable());\n        }\n      }\n      dispatch(setCellArray(cellArrayCopy));\n    }\n  };\n\n  const isClickableSquare = () =>\n    (gameStatus === \"waiting\" || gameStatus === \"running\") &&\n    cellArray[index].flagged !== true &&\n    cellArray[index].advancedChecked === false;\n\n  return (\n    <CellStyled\n      onClick={() => {\n        // Should the onClick and onContextMenu logic be inside the Cell?\n        if (isClickableSquare()) {\n          dispatch(\n            setCellArray(cellPressed(index, cellArray, gridColumns, gridSize))\n          );\n          if (gameStatus !== \"running\") dispatch(setGameStatus(\"running\"));\n        }\n      }}\n      onContextMenu={(e: MouseEvent) => flagHandler(e, index)}\n      gridColumns={gridColumns}\n      pressed={pressed}\n      draggable=\"false\"\n    >\n      {toDisplay(cellArray[index])}\n    </CellStyled>\n  );\n};\n\nexport default memo(Cell);\n"]},"metadata":{},"sourceType":"module"}