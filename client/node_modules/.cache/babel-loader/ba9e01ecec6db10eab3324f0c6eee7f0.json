{"ast":null,"code":"import{mineCheck}from\"./mineCheck\";// index: number; cellArray: initialStateTypes[\"cellArray\"]; gridColumns: initialStateTypes[\"gridColumns\"]; gridSize: initialStateTypes[\"\"]\n///////////////////////// Click Handler\nexport var cellPressed=function cellPressed(index,cellArray,gridColumns,gridSize){var cellArrayCopy=JSON.parse(JSON.stringify(cellArray));if(cellArray[index].value===\"bomb\"){// Sets all the cells that are bombs to \"advancedChecked\" meaning checked, meaning to be visible.\ncellArrayCopy.forEach(function(curr){if(curr.value===\"bomb\"){curr.advancedChecked=true;}else if(curr.flagged===true){curr.flagged=\"wrong\";}});// Shows an explosion to demonstrate that it was a bomb\ncellArrayCopy[index].value=\"bombPressed\";return cellArrayCopy;}else{return mineCheck(index,index,cellArrayCopy,gridColumns,gridSize);}};","map":{"version":3,"sources":["/Users/diogosantos/dev/minesweeper/src/utils/BoardUtils/cellPressed.ts"],"names":["mineCheck","cellPressed","index","cellArray","gridColumns","gridSize","cellArrayCopy","JSON","parse","stringify","value","forEach","curr","advancedChecked","flagged"],"mappings":"AAAA,OAASA,SAAT,KAA0B,aAA1B,CAWA;AACA;AACA,MAAO,IAAMC,CAAAA,WAA4B,CAAG,QAA/BA,CAAAA,WAA+B,CAC1CC,KAD0C,CAE1CC,SAF0C,CAG1CC,WAH0C,CAI1CC,QAJ0C,CAKvC,CACH,GAAIC,CAAAA,aAA6C,CAAGC,IAAI,CAACC,KAAL,CAClDD,IAAI,CAACE,SAAL,CAAeN,SAAf,CADkD,CAApD,CAGA,GAAIA,SAAS,CAACD,KAAD,CAAT,CAAiBQ,KAAjB,GAA2B,MAA/B,CAAuC,CACrC;AAEAJ,aAAa,CAACK,OAAd,CAAsB,SAACC,IAAD,CAAU,CAC9B,GAAIA,IAAI,CAACF,KAAL,GAAe,MAAnB,CAA2B,CACzBE,IAAI,CAACC,eAAL,CAAuB,IAAvB,CACD,CAFD,IAEO,IAAID,IAAI,CAACE,OAAL,GAAiB,IAArB,CAA2B,CAChCF,IAAI,CAACE,OAAL,CAAe,OAAf,CACD,CACF,CAND,EAOA;AACAR,aAAa,CAACJ,KAAD,CAAb,CAAqBQ,KAArB,CAA6B,aAA7B,CAEA,MAAOJ,CAAAA,aAAP,CACD,CAdD,IAcO,CACL,MAAON,CAAAA,SAAS,CAACE,KAAD,CAAQA,KAAR,CAAeI,aAAf,CAA8BF,WAA9B,CAA2CC,QAA3C,CAAhB,CACD,CACF,CA1BM","sourcesContent":["import { mineCheck } from \"./mineCheck\";\n\nimport { initialStateTypes } from \"../../store/settingsSlice\";\n\ntype CellPressedType = (\n  index: number,\n  cellArray: initialStateTypes[\"cellArray\"],\n  gridColumns: initialStateTypes[\"gridColumnsAmount\"],\n  gridSize: initialStateTypes[\"gridLength\"]\n) => initialStateTypes[\"cellArray\"];\n\n// index: number; cellArray: initialStateTypes[\"cellArray\"]; gridColumns: initialStateTypes[\"gridColumns\"]; gridSize: initialStateTypes[\"\"]\n///////////////////////// Click Handler\nexport const cellPressed: CellPressedType = (\n  index,\n  cellArray,\n  gridColumns,\n  gridSize\n) => {\n  let cellArrayCopy: initialStateTypes[\"cellArray\"] = JSON.parse(\n    JSON.stringify(cellArray)\n  );\n  if (cellArray[index].value === \"bomb\") {\n    // Sets all the cells that are bombs to \"advancedChecked\" meaning checked, meaning to be visible.\n\n    cellArrayCopy.forEach((curr) => {\n      if (curr.value === \"bomb\") {\n        curr.advancedChecked = true;\n      } else if (curr.flagged === true) {\n        curr.flagged = \"wrong\";\n      }\n    });\n    // Shows an explosion to demonstrate that it was a bomb\n    cellArrayCopy[index].value = \"bombPressed\";\n\n    return cellArrayCopy;\n  } else {\n    return mineCheck(index, index, cellArrayCopy, gridColumns, gridSize);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}