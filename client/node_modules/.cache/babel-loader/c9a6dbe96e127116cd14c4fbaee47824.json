{"ast":null,"code":"import { mineCheck } from \"./mineCheck\";\n// index: number; cellArray: initialStateTypes[\"cellArray\"]; gridColumns: initialStateTypes[\"gridColumns\"]; gridSize: initialStateTypes[\"\"]\n///////////////////////// Click Handler\nexport const cellPressed = (index, cellArray, gridColumns, gridSize) => {\n  let cellArrayCopy = JSON.parse(JSON.stringify(cellArray));\n  if (cellArray[index].value === \"bomb\") {\n    // Sets all the cells that are bombs to \"advancedChecked\" meaning checked, meaning to be visible.\n\n    cellArrayCopy.forEach(curr => {\n      if (curr.value === \"bomb\") {\n        curr.advancedChecked = true;\n      } else if (curr.flagged === true) {\n        curr.flagged = \"wrong\";\n      }\n    });\n    // Shows an explosion to demonstrate that it was a bomb\n    cellArrayCopy[index].value = \"bombPressed\";\n    return cellArrayCopy;\n  } else {\n    return mineCheck(index, index, cellArrayCopy, gridColumns, gridSize);\n  }\n};","map":{"version":3,"names":["mineCheck","cellPressed","index","cellArray","gridColumns","gridSize","cellArrayCopy","JSON","parse","stringify","value","forEach","curr","advancedChecked","flagged"],"sources":["/Users/diogosantos/dev/minesweeper/client/src/utils/BoardUtils/cellPressed.ts"],"sourcesContent":["import { mineCheck } from \"./mineCheck\";\n\nimport { initialStateTypes } from \"../../store/settingsSlice\";\n\ntype CellPressedType = (\n  index: number,\n  cellArray: initialStateTypes[\"cellArray\"],\n  gridColumns: initialStateTypes[\"gridColumnsAmount\"],\n  gridSize: initialStateTypes[\"gridLength\"]\n) => initialStateTypes[\"cellArray\"];\n\n// index: number; cellArray: initialStateTypes[\"cellArray\"]; gridColumns: initialStateTypes[\"gridColumns\"]; gridSize: initialStateTypes[\"\"]\n///////////////////////// Click Handler\nexport const cellPressed: CellPressedType = (\n  index,\n  cellArray,\n  gridColumns,\n  gridSize\n) => {\n  let cellArrayCopy: initialStateTypes[\"cellArray\"] = JSON.parse(\n    JSON.stringify(cellArray)\n  );\n  if (cellArray[index].value === \"bomb\") {\n    // Sets all the cells that are bombs to \"advancedChecked\" meaning checked, meaning to be visible.\n\n    cellArrayCopy.forEach((curr) => {\n      if (curr.value === \"bomb\") {\n        curr.advancedChecked = true;\n      } else if (curr.flagged === true) {\n        curr.flagged = \"wrong\";\n      }\n    });\n    // Shows an explosion to demonstrate that it was a bomb\n    cellArrayCopy[index].value = \"bombPressed\";\n\n    return cellArrayCopy;\n  } else {\n    return mineCheck(index, index, cellArrayCopy, gridColumns, gridSize);\n  }\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AAWvC;AACA;AACA,OAAO,MAAMC,WAA4B,GAAGA,CAC1CC,KAAK,EACLC,SAAS,EACTC,WAAW,EACXC,QAAQ,KACL;EACH,IAAIC,aAA6C,GAAGC,IAAI,CAACC,KAAK,CAC5DD,IAAI,CAACE,SAAS,CAACN,SAAS,CAAC,CAC1B;EACD,IAAIA,SAAS,CAACD,KAAK,CAAC,CAACQ,KAAK,KAAK,MAAM,EAAE;IACrC;;IAEAJ,aAAa,CAACK,OAAO,CAAEC,IAAI,IAAK;MAC9B,IAAIA,IAAI,CAACF,KAAK,KAAK,MAAM,EAAE;QACzBE,IAAI,CAACC,eAAe,GAAG,IAAI;MAC7B,CAAC,MAAM,IAAID,IAAI,CAACE,OAAO,KAAK,IAAI,EAAE;QAChCF,IAAI,CAACE,OAAO,GAAG,OAAO;MACxB;IACF,CAAC,CAAC;IACF;IACAR,aAAa,CAACJ,KAAK,CAAC,CAACQ,KAAK,GAAG,aAAa;IAE1C,OAAOJ,aAAa;EACtB,CAAC,MAAM;IACL,OAAON,SAAS,CAACE,KAAK,EAAEA,KAAK,EAAEI,aAAa,EAAEF,WAAW,EAAEC,QAAQ,CAAC;EACtE;AACF,CAAC"},"metadata":{},"sourceType":"module"}