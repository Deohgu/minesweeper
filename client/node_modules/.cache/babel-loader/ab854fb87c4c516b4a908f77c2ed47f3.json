{"ast":null,"code":"import React,{useEffect}from\"react\";import{useSelector,useDispatch}from\"react-redux\";import Draggable from\"react-draggable\";import{resetFlagsAvailable,setCellArray,setGameStatus,selectSettings}from\"../../store/settingsSlice\";import TitleBar from\"../TitleBar/TitleBar\";import WindowButtons from\"../WindowButtons/WindowButtons\";import{Scoreboard}from\"../Scoreboard/Scoreboard\";import Board from\"../Board/Board\";import{Window,GameBox}from\"./Game.styled\";export var Game=function Game(){var _useSelector=useSelector(selectSettings),gridSize=_useSelector.gridLength,bombsAmount=_useSelector.bombsAmount,cellArray=_useSelector.cellArray,gameStatus=_useSelector.gameStatus;var dispatch=useDispatch();///////////////////////// Creator of grid & Bomb Populator\n// If status of the game changes to \"waiting\" -> generate a new Cell array.\n// Runs at the start and at each reset button press.\nuseEffect(function(){if(gameStatus===\"waiting\"){dispatch(resetFlagsAvailable());var newCellArray=[];for(var i=0;i<gridSize-bombsAmount;i++){newCellArray.push({checked:false,advancedChecked:false,flagged:false});}for(var j=0;j<bombsAmount;j++){newCellArray.push({value:\"bomb\",checked:false,advancedChecked:false,flagged:false});}dispatch(setCellArray(newCellArray.sort(function(a,b){return Math.random()-0.5;})));}},[dispatch,gameStatus,bombsAmount,gridSize]);//  Updates game's status\nuseEffect(function(){// Algorithm To be improved\nvar advCheckedAmount=0;var bombPressed=false;cellArray.forEach(function(curr){if(curr.advancedChecked){advCheckedAmount++;}if(curr.value===\"bombPressed\"){bombPressed=true;}});if(bombPressed){dispatch(setGameStatus(\"lost\"));}else if(advCheckedAmount===gridSize-bombsAmount){dispatch(setGameStatus(\"won\"));}},[bombsAmount,cellArray,dispatch,gridSize]);// makes everything visible if won\nuseEffect(function(){if(gameStatus===\"won\"){var gridCopy=JSON.parse(JSON.stringify(cellArray));gridCopy.forEach(function(cell){cell.advancedChecked=true;// makes everything visible\n});dispatch(setCellArray(gridCopy));}},[dispatch,gameStatus]);// eslint-disable-line\nreturn/*#__PURE__*/React.createElement(Draggable,{handle:\".handle\"},/*#__PURE__*/React.createElement(Window,null,/*#__PURE__*/React.createElement(TitleBar,null),/*#__PURE__*/React.createElement(WindowButtons,null),/*#__PURE__*/React.createElement(GameBox,null,/*#__PURE__*/React.createElement(Scoreboard,null),/*#__PURE__*/React.createElement(Board,null))));};","map":{"version":3,"sources":["/Users/diogosantos/dev/minesweeper/src/components/Game/Game.tsx"],"names":["React","useEffect","useSelector","useDispatch","Draggable","resetFlagsAvailable","setCellArray","setGameStatus","selectSettings","TitleBar","WindowButtons","Scoreboard","Board","Window","GameBox","Game","gridSize","gridLength","bombsAmount","cellArray","gameStatus","dispatch","newCellArray","i","push","checked","advancedChecked","flagged","j","value","sort","a","b","Math","random","advCheckedAmount","bombPressed","forEach","curr","gridCopy","JSON","parse","stringify","cell"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Draggable from \"react-draggable\";\n\nimport {\n  resetFlagsAvailable,\n  setCellArray,\n  setGameStatus,\n  CellType,\n  initialStateTypes,\n  selectSettings,\n} from \"../../store/settingsSlice\";\n\nimport TitleBar from \"../TitleBar/TitleBar\";\nimport WindowButtons from \"../WindowButtons/WindowButtons\";\nimport { Scoreboard } from \"../Scoreboard/Scoreboard\";\nimport Board from \"../Board/Board\";\n\nimport { Window, GameBox } from \"./Game.styled\";\n\nexport const Game = () => {\n  const {\n    gridLength: gridSize,\n    bombsAmount,\n    cellArray,\n    gameStatus,\n  } = useSelector(selectSettings);\n  const dispatch = useDispatch();\n\n  ///////////////////////// Creator of grid & Bomb Populator\n  // If status of the game changes to \"waiting\" -> generate a new Cell array.\n  // Runs at the start and at each reset button press.\n  useEffect(() => {\n    if (gameStatus === \"waiting\") {\n      dispatch(resetFlagsAvailable());\n      const newCellArray: initialStateTypes[\"cellArray\"] = [];\n      for (let i = 0; i < gridSize - bombsAmount; i++) {\n        newCellArray.push({\n          checked: false,\n          advancedChecked: false,\n          flagged: false,\n        });\n      }\n      for (let j = 0; j < bombsAmount; j++) {\n        newCellArray.push({\n          value: \"bomb\",\n          checked: false,\n          advancedChecked: false,\n          flagged: false,\n        });\n      }\n      dispatch(setCellArray(newCellArray.sort((a, b) => Math.random() - 0.5)));\n    }\n  }, [dispatch, gameStatus, bombsAmount, gridSize]);\n\n  //  Updates game's status\n  useEffect(() => {\n    // Algorithm To be improved\n    let advCheckedAmount = 0;\n    let bombPressed = false;\n    cellArray.forEach((curr) => {\n      if (curr.advancedChecked) {\n        advCheckedAmount++;\n      }\n      if (curr.value === \"bombPressed\") {\n        bombPressed = true;\n      }\n    });\n\n    if (bombPressed) {\n      dispatch(setGameStatus(\"lost\"));\n    } else if (advCheckedAmount === gridSize - bombsAmount) {\n      dispatch(setGameStatus(\"won\"));\n    }\n  }, [bombsAmount, cellArray, dispatch, gridSize]);\n\n  // makes everything visible if won\n  useEffect(() => {\n    if (gameStatus === \"won\") {\n      const gridCopy = JSON.parse(JSON.stringify(cellArray));\n      gridCopy.forEach((cell: CellType) => {\n        cell.advancedChecked = true; // makes everything visible\n      });\n\n      dispatch(setCellArray(gridCopy));\n    }\n  }, [dispatch, gameStatus]); // eslint-disable-line\n\n  return (\n    <Draggable handle=\".handle\">\n      <Window>\n        <TitleBar />\n        <WindowButtons />\n        <GameBox>\n          <Scoreboard />\n          <Board />\n        </GameBox>\n      </Window>\n    </Draggable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}