{"ast":null,"code":"var _jsxFileName = \"/Users/diogosantos/dev/minesweeper/client/src/components/Cell/Cell.tsx\",\n  _s = $RefreshSig$();\nimport React, { memo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setCellArray, setGameStatus, incFlagsAvailable, decFlagsAvailable, selectSettings } from \"../../store/settingsSlice\";\nimport { CellStyled } from \"./Cell.styled\";\nimport { toDisplay } from \"../../utils/CellUtils/toDisplay\";\nimport { cellPressed } from \"../../utils/BoardUtils/cellPressed\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cell = _ref => {\n  _s();\n  let {\n    index,\n    pressed\n  } = _ref;\n  const {\n    gridLength: gridSize,\n    gridColumnsAmount: gridColumns,\n    gameStatus,\n    cellArray\n  } = useSelector(selectSettings);\n  const dispatch = useDispatch();\n  const flagHandler = (e, index) => {\n    e.preventDefault();\n    if (gameStatus === \"running\") {\n      let cellArrayCopy = JSON.parse(JSON.stringify(cellArray));\n      if (cellArrayCopy[index].advancedChecked === false) {\n        if (cellArrayCopy[index].flagged === false) {\n          cellArrayCopy[index].flagged = true;\n          dispatch(decFlagsAvailable());\n        } else {\n          cellArrayCopy[index].flagged = false;\n          dispatch(incFlagsAvailable());\n        }\n      }\n      dispatch(setCellArray(cellArrayCopy));\n    }\n  };\n  const isClickableSquare = () => (gameStatus === \"waiting\" || gameStatus === \"running\") && cellArray[index].flagged !== true && cellArray[index].advancedChecked === false;\n  return /*#__PURE__*/_jsxDEV(CellStyled, {\n    onClick: () => {\n      // Should the onClick and onContextMenu logic be inside the Cell?\n      if (isClickableSquare()) {\n        dispatch(setCellArray(cellPressed(index, cellArray, gridColumns, gridSize)));\n        if (gameStatus !== \"running\") dispatch(setGameStatus(\"running\"));\n      }\n    },\n    onContextMenu: e => flagHandler(e, index),\n    gridColumns: gridColumns,\n    pressed: pressed,\n    draggable: \"false\",\n    children: toDisplay(cellArray[index])\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(Cell, \"cHUMutZQEXOC068UDVT7XOsVmgY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Cell;\nexport default _c2 = /*#__PURE__*/memo(Cell);\nvar _c, _c2;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","memo","useSelector","useDispatch","setCellArray","setGameStatus","incFlagsAvailable","decFlagsAvailable","selectSettings","CellStyled","toDisplay","cellPressed","jsxDEV","_jsxDEV","Cell","_ref","_s","index","pressed","gridLength","gridSize","gridColumnsAmount","gridColumns","gameStatus","cellArray","dispatch","flagHandler","e","preventDefault","cellArrayCopy","JSON","parse","stringify","advancedChecked","flagged","isClickableSquare","onClick","onContextMenu","draggable","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","$RefreshReg$"],"sources":["/Users/diogosantos/dev/minesweeper/client/src/components/Cell/Cell.tsx"],"sourcesContent":["import React, { MouseEvent, ComponentPropsWithRef, memo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  setCellArray,\n  setGameStatus,\n  incFlagsAvailable,\n  decFlagsAvailable,\n  selectSettings,\n} from \"../../store/settingsSlice\";\n\nimport { CellStyled } from \"./Cell.styled\";\n\nimport { toDisplay } from \"../../utils/CellUtils/toDisplay\";\nimport { cellPressed } from \"../../utils/BoardUtils/cellPressed\";\n\ntype CellTypes = {\n  index: number;\n  pressed: boolean;\n} & ComponentPropsWithRef<typeof CellStyled>;\n\nconst Cell = ({ index, pressed }: CellTypes) => {\n  const {\n    gridLength: gridSize,\n    gridColumnsAmount: gridColumns,\n    gameStatus,\n    cellArray,\n  } = useSelector(selectSettings);\n\n  const dispatch = useDispatch();\n\n  const flagHandler = (e: MouseEvent, index: number) => {\n    e.preventDefault();\n    if (gameStatus === \"running\") {\n      let cellArrayCopy = JSON.parse(JSON.stringify(cellArray));\n      if (cellArrayCopy[index].advancedChecked === false) {\n        if (cellArrayCopy[index].flagged === false) {\n          cellArrayCopy[index].flagged = true;\n          dispatch(decFlagsAvailable());\n        } else {\n          cellArrayCopy[index].flagged = false;\n          dispatch(incFlagsAvailable());\n        }\n      }\n      dispatch(setCellArray(cellArrayCopy));\n    }\n  };\n\n  const isClickableSquare = () =>\n    (gameStatus === \"waiting\" || gameStatus === \"running\") &&\n    cellArray[index].flagged !== true &&\n    cellArray[index].advancedChecked === false;\n\n  return (\n    <CellStyled\n      onClick={() => {\n        // Should the onClick and onContextMenu logic be inside the Cell?\n        if (isClickableSquare()) {\n          dispatch(\n            setCellArray(cellPressed(index, cellArray, gridColumns, gridSize))\n          );\n          if (gameStatus !== \"running\") dispatch(setGameStatus(\"running\"));\n        }\n      }}\n      onContextMenu={(e: MouseEvent) => flagHandler(e, index)}\n      gridColumns={gridColumns}\n      pressed={pressed}\n      draggable=\"false\"\n    >\n      {toDisplay(cellArray[index])}\n    </CellStyled>\n  );\n};\n\nexport default memo(Cell);\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAuCC,IAAI,QAAQ,OAAO;AACtE,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SACEC,YAAY,EACZC,aAAa,EACbC,iBAAiB,EACjBC,iBAAiB,EACjBC,cAAc,QACT,2BAA2B;AAElC,SAASC,UAAU,QAAQ,eAAe;AAE1C,SAASC,SAAS,QAAQ,iCAAiC;AAC3D,SAASC,WAAW,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOjE,MAAMC,IAAI,GAAGC,IAAA,IAAmC;EAAAC,EAAA;EAAA,IAAlC;IAAEC,KAAK;IAAEC;EAAmB,CAAC,GAAAH,IAAA;EACzC,MAAM;IACJI,UAAU,EAAEC,QAAQ;IACpBC,iBAAiB,EAAEC,WAAW;IAC9BC,UAAU;IACVC;EACF,CAAC,GAAGtB,WAAW,CAACM,cAAc,CAAC;EAE/B,MAAMiB,QAAQ,GAAGtB,WAAW,EAAE;EAE9B,MAAMuB,WAAW,GAAGA,CAACC,CAAa,EAAEV,KAAa,KAAK;IACpDU,CAAC,CAACC,cAAc,EAAE;IAClB,IAAIL,UAAU,KAAK,SAAS,EAAE;MAC5B,IAAIM,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACR,SAAS,CAAC,CAAC;MACzD,IAAIK,aAAa,CAACZ,KAAK,CAAC,CAACgB,eAAe,KAAK,KAAK,EAAE;QAClD,IAAIJ,aAAa,CAACZ,KAAK,CAAC,CAACiB,OAAO,KAAK,KAAK,EAAE;UAC1CL,aAAa,CAACZ,KAAK,CAAC,CAACiB,OAAO,GAAG,IAAI;UACnCT,QAAQ,CAAClB,iBAAiB,EAAE,CAAC;QAC/B,CAAC,MAAM;UACLsB,aAAa,CAACZ,KAAK,CAAC,CAACiB,OAAO,GAAG,KAAK;UACpCT,QAAQ,CAACnB,iBAAiB,EAAE,CAAC;QAC/B;MACF;MACAmB,QAAQ,CAACrB,YAAY,CAACyB,aAAa,CAAC,CAAC;IACvC;EACF,CAAC;EAED,MAAMM,iBAAiB,GAAGA,CAAA,KACxB,CAACZ,UAAU,KAAK,SAAS,IAAIA,UAAU,KAAK,SAAS,KACrDC,SAAS,CAACP,KAAK,CAAC,CAACiB,OAAO,KAAK,IAAI,IACjCV,SAAS,CAACP,KAAK,CAAC,CAACgB,eAAe,KAAK,KAAK;EAE5C,oBACEpB,OAAA,CAACJ,UAAU;IACT2B,OAAO,EAAEA,CAAA,KAAM;MACb;MACA,IAAID,iBAAiB,EAAE,EAAE;QACvBV,QAAQ,CACNrB,YAAY,CAACO,WAAW,CAACM,KAAK,EAAEO,SAAS,EAAEF,WAAW,EAAEF,QAAQ,CAAC,CAAC,CACnE;QACD,IAAIG,UAAU,KAAK,SAAS,EAAEE,QAAQ,CAACpB,aAAa,CAAC,SAAS,CAAC,CAAC;MAClE;IACF,CAAE;IACFgC,aAAa,EAAGV,CAAa,IAAKD,WAAW,CAACC,CAAC,EAAEV,KAAK,CAAE;IACxDK,WAAW,EAAEA,WAAY;IACzBJ,OAAO,EAAEA,OAAQ;IACjBoB,SAAS,EAAC,OAAO;IAAAC,QAAA,EAEhB7B,SAAS,CAACc,SAAS,CAACP,KAAK,CAAC;EAAC;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACjB;AAEjB,CAAC;AAAC3B,EAAA,CAnDIF,IAAI;EAAA,QAMJZ,WAAW,EAEEC,WAAW;AAAA;AAAAyC,EAAA,GARxB9B,IAAI;AAqDV,eAAA+B,GAAA,gBAAe5C,IAAI,CAACa,IAAI,CAAC;AAAC,IAAA8B,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module"}